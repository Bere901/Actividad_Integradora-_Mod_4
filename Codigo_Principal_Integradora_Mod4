import os, pygame
from pygame.locals import *
from pygame.compat import geterror

from pygame import mixer
pygame.mixer.init()

import RPi.GPIO as GPIO
import serial
from PyQt5 import QtGui, QtCore

#import GPIOmock as GPIO
import threading
import time
import random
import os
from subprocess import call

from PIL import Image, ImageDraw, ImageFont

from board import SCL, SDA
import busio
import adafruit_ssd1306


global x2
#olde


i2c = busio.I2C(SCL, SDA)
display = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)
image = Image.new('1',(128,64))
draw = ImageDraw.Draw(image)

font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 50)
font2 = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 15)
font3 = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 10)

a=1

#arduino
ser = serial.Serial(
port= "/dev/ttyACM0",
baudrate = 9600,
parity=serial.PARITY_NONE,
stopbits=serial.STOPBITS_ONE,
bytesize=serial.EIGHTBITS,timeout=1)

counter=0
#sonido
son2 = pygame.mixer.Sound('son2.wav')
son = pygame.mixer.Sound('son.wav')



        
# green, red, blue, yellow
LIGHTS = [13, 26, 19, 6]
BUTTONS = [17, 22, 27, 4]
NOTES = ["E3", "A4", "E4", "Cs4"]

# values you can change that affect game play
speed = 0.25
use_sounds = True

# flags used to signal game status
is_displaying_pattern = False
is_won_current_level = False
is_game_over = False

# game state
current_level = 1
current_step_of_level = 0
pattern = []


#def play_note(note):
    #if use_sounds:
        #call(["sonic_pi", "play :" + note])


def initialize_gpio():
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(LIGHTS, GPIO.OUT, initial=GPIO.LOW)
    GPIO.setup(BUTTONS, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
    for i in range(4):
        GPIO.add_event_detect(BUTTONS[i], GPIO.FALLING, verify_player_selection, 400 if use_sounds else 250)


def verify_player_selection(channel):
    global current_step_of_level, current_level, is_won_current_level, is_game_over
    if not is_displaying_pattern and not is_won_current_level and not is_game_over:
        #play_note(NOTES[BUTTONS.index(channel)])
        flash_led_for_button(channel)
        if channel == BUTTONS[pattern[current_step_of_level]]:
            current_step_of_level += 1
            if current_step_of_level >= current_level:
                current_level += 1
                is_won_current_level = True
        else:
            is_game_over = True


def flash_led_for_button(button_channel):
    led = LIGHTS[BUTTONS.index(button_channel)]
    GPIO.output(led, GPIO.HIGH)
    time.sleep(0.1)
    GPIO.output(led, GPIO.LOW)


def add_new_color_to_pattern():
    global is_won_current_level, current_step_of_level
    is_won_current_level = False
    current_step_of_level = 0
    son2.play()

 
    #for i in range(a):
    #time.sleep(1)
    image = Image.new('1',(128,64))
    draw = ImageDraw.Draw(image)
    font = ImageFont.load_default()

        

    
    x=ser.readline()
    x=str(x)
    x=x.split("\\r\\n")
    x=x[0].split("b")
    x=str(x[1])
    x=str(x[1])		
    x2=0
    if x=="1" or x=="2" or x=="0" or x=="3":
        x2=int(x)
        #print(x2)
    next_color = x2
    #print(x2)
    global a
    a=str(a)
    draw.text((45, 5), "ronda", font=font2, fill=255)
    draw.text((55, 20), a , font=font, fill=300)
    #       largo , alto
    display.image(image)
    display.show()
    print(a)
    a=int(a)
    a=a+1
    pattern.append(next_color)


def display_pattern_to_player():
    global is_displaying_pattern
    is_displaying_pattern = True
    GPIO.output(LIGHTS, GPIO.LOW)
    for i in range(current_level):
        #play_note(NOTES[pattern[i]])
        GPIO.output(LIGHTS[pattern[i]], GPIO.HIGH)
        time.sleep(speed)
        GPIO.output(LIGHTS[pattern[i]], GPIO.LOW)
        time.sleep(speed)
    is_displaying_pattern = False


def wait_for_player_to_repeat_pattern():
    
    while not is_won_current_level and not is_game_over:
        time.sleep(0.1)


def reset_board_for_new_game():
    global a
    a=1
    global is_displaying_pattern, is_won_current_level, is_game_over
    global current_level, current_step_of_level, pattern
    is_displaying_pattern = False
    is_won_current_level = False
    is_game_over = False
    current_level = 1
    current_step_of_level = 0
    pattern = []
    GPIO.output(LIGHTS, GPIO.LOW)


def start_game():
    while True:
        add_new_color_to_pattern()
        display_pattern_to_player()
        wait_for_player_to_repeat_pattern()
        if is_game_over:
            son.play()
            print("Game Over! Your max score was {} colors!\n".format(current_level-1))
            image = Image.new('1',(128,64))
            draw = ImageDraw.Draw(image)
            font = ImageFont.load_default()

            draw.text((25, 30), "Game over", font=font2, fill=255)
            display.image(image)
            display.show()
            time.sleep(2)
            
            image = Image.new('1',(128,64))
            draw = ImageDraw.Draw(image)
            font = ImageFont.load_default()
            global a
            a=a-2
            a=str(a)

            draw.text((10, 10), "tu puntuacion fue de", font=font3, fill=255)
            draw.text((64, 30), a, font=font2, fill=255)
            display.image(image)
            display.show()
            
            play_again = input("Enter 'Y' to play again, or just press [ENTER] to exit.\n")
            if play_again == "Y" or play_again == "y":
                
                reset_board_for_new_game()
                print("Begin new round!\n")
            else:
                print("Thanks for playing!\n")
                break
        time.sleep(2)


def start_game_monitor():
    t = threading.Thread(target=start_game)
    t.daemon = True
    t.start()
    t.join()


def main():
    try:
       
        
        os.system('cls' if os.name == 'nt' else 'clear')
        print("Begin new round!\n")
        draw.text((10, 10), "Begin new round!\n", font=font3, fill=255)
        display.image(image)
        display.show()
        time.sleep(1)


        initialize_gpio()
        start_game_monitor()
    finally:
        GPIO.cleanup()


if __name__ == '__main__':
    main()
